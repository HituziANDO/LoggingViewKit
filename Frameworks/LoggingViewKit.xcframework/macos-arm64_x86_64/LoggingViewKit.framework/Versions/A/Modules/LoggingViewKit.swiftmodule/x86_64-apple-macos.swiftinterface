// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-macos10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name LoggingViewKit
import Foundation
@_exported import LoggingViewKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(LVKCounter) public class LVKCounter : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc public var count: Swift.Int64 {
    get
  }
  @objc final public let createdAt: Foundation.Date
  @objc public var lastUpdatedAt: Foundation.Date {
    @objc get
  }
  @objc convenience public init(name: Swift.String, database db: any LoggingViewKit.LGVDatabase)
  @objc public init(name: Swift.String, count: Swift.Int64, createdAt: Foundation.Date, updatedAt: Foundation.Date?, database db: any LoggingViewKit.LGVDatabase)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc extension LoggingViewKit.LVKCounter {
  @objc @discardableResult
  dynamic public func increase() -> Swift.Bool
  @objc @discardableResult
  dynamic public func increase(withCondition condition: LoggingViewKit.LVKIncrementCondition) -> Swift.Bool
  @objc @discardableResult
  dynamic public func reset() -> Swift.Bool
  @objc @discardableResult
  dynamic public func reset(initialValue: Swift.Int64) -> Swift.Bool
}
@objc(LVKIncrementCondition) public enum LVKIncrementCondition : Swift.Int {
  case anyTime
  case onceADay
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension LoggingViewKit.LVKIncrementCondition : Swift.Equatable {}
extension LoggingViewKit.LVKIncrementCondition : Swift.Hashable {}
extension LoggingViewKit.LVKIncrementCondition : Swift.RawRepresentable {}
